#+STARTUP: content
* TODO Learn to use magit with Reddit comments & a video from creator 
  https://www.reddit.com/r/emacs/comments/2n9tj8/anyone_care_to_share_their_magit_workflow/
  https://vimeo.com/2871241
  https://magit.vc/manual/magit/Ediffing.html

* Logging
** Log show filenames: *git log --name-only*
   http://stackoverflow.com/questions/1230084/how-to-have-git-log-show-filenames-like-svn-log-v

** View change history of file (diff): *git log -p <filename>*
   http://stackoverflow.com/questions/278192/view-the-change-history-of-a-file-using-git-versioning

** Log short just one commit line: *git log --pretty=oneline --abbrev-commit*
   http://stackoverflow.com/questions/4479225/how-to-output-git-log-with-the-first-line-only

** Log short just one commit line with author: *git log --pretty=format:"%h%x09%an%x09%ad%x09%s"/*
   http://stackoverflow.com/questions/1441010/the-shortest-possible-output-from-git-log-containing-author-and-date


* Diff
** Diff which files changes between branches: *git diff --name-status master..branchName*
  Only show filename:
  git diff --name-status master..branchName

  Show file differences:
  git diff master..branchName
  http://stackoverflow.com/questions/822811/showing-which-files-have-changed-between-two-revisions

** Diff a file between branches: *git diff branchA branchB -- myfile*
  http://stackoverflow.com/questions/4099742/how-to-compare-files-from-two-different-branches
** Show staged changes: *git diff --cached*
  http://stackoverflow.com/questions/1587846/how-do-i-show-the-changes-which-have-been-staged

** Stop tracking a remote branch
  http://stackoverflow.com/questions/3046436/how-do-you-stop-tracking-a-remote-branch-in-git
  Simply delete your remote tracking branch :
  (This will not delete the branch on the remote repo!)

  git branch -d -r origin/<remote branch name>

  Remove the upstream information for <branchname>:
  If no branch is specified it defaults to the current branch.

  git branch --unset-upstream


* Branching
** Create a remote branch: *git checkout -b your_branch | git push -u origin your_branch*
  First, you must create your branch locally

  git checkout -b your_branch

  After that, you can work locally in your branch, when you are ready to share the branch, push it.
  The next command push the branch to the remote repository origin and tracks it

  git push -u origin your_branch
  http://stackoverflow.com/questions/1519006/how-do-you-create-a-remote-git-branch

** Delete local branch: *git branch -d the_local_branch*
  http://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote
** Rename git branch locally and remotely
  https://gist.github.com/lttlrck/9628955
  git branch -m old_branch new_branch         # Rename branch locally    
  git push origin :old_branch                 # Delete the old branch (colon does it)
  git push --set-upstream origin new_branch   # Push the new branch, set local branch to track the new remote


* Undoing
** Discard unstaged changes: *git checkout path/to/file/to/revert*
  http://stackoverflow.com/questions/52704/how-do-you-discard-unstaged-changes-in-git

** Undo last commit and keep changes at index: *git reset --soft HEAD~1*
  http://stackoverflow.com/questions/927358/how-to-undo-last-commits-in-git

** Undo a git merge that hasn't been pushed yet: *git reset --hard <commit_sha>*
  With git log check which commit is one prior the merge. Then you can reset it using:
  git reset --hard <commit_sha>

  There's also another way that will get you back 1 commit.
  git reset --hard HEAD~1

  http://stackoverflow.com/questions/2389361/undo-a-git-merge-that-hasnt-been-pushed-yet


* Theory
** What is HEAD
   http://stackoverflow.com/questions/2529971/what-is-the-head-in-git
   Interesting answer and comments that explain that a branch point to a commit.
   And a commit to its parents, but there is no reference from the commits to the branch.
   - TODO: Read more about *git internals*
   - If you look at the contents of .git/HEAD you'll see something like "ref: refs/heads/master"

   More complete: http://stackoverflow.com/questions/964876/head-and-orig-head-in-git/964927#964927
